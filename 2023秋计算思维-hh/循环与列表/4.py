'''
任务描述
本关任务是结合 Python 函数和循环结构编写相应代码，完成arctg函数的泰勒级数计算。

相关知识
Machin公式
1706 年英国数学家梅钦（John Machin）提出 Machin 公式，计算得到的π值突破 100 位小数大关，该公式如下：
4
Π
​
 =4arctg 
5
1
​
 −arctg 
239
1
​
 
arctg函数可以由泰勒级数（无限连加式-级数来表示一个函数）算出，公式如下：
arctg(x)=x− 
3
x 
3
 
​
 + 
5
x 
5
 
​
 − 
7
x 
7
 
​
 +⋯+(−1) 
n−1
  
2n−1
x 
2n−1
 
​
 
泰勒级数展开的项数越多，即arctg函数中的 n 值越大，函数值就会越精确。当项数等于 5 时，计算得到的圆周率等于 3.14159268240439937259 ，相当于我们的老祖宗祖冲之的计算结果。

python函数
函数是可重复使用的、用来实现单一或相关联功能的代码段，函数能提高应用的模块性和代码的重复利用率。 Python 提供了许多内建函数，比如print()等等，用户也可以自己创建函数，即自定义函数。

函数定义
在 Python 中，定义函数需满足如下规则：

函数代码块以def关键词开头，后接函数标识符名称和圆括号 ( ) ；

任何传入参数和自变量必须放在圆括号中间；

函数内容以冒号 : 起始，并且在缩进块中编写函数体；

return 语句用于结束函数，可选择性地返回一个值给调用方；不带表达式的return相当于返回None。

函数定义的语法结构如下所示：

def function_name(parameters):
   function_body
   return [expression]
例如，求绝对值的my_abs函数示例如下：

def my_abs(x):
    if x >= 0:
        return x
    else:
        return -x
在上述示例代码中，定义了一个名为my_abs的函数，参数x表示要求绝对值的数。在函数体中，通过if...else...分析判断参数x的值，大于等于 0 则直接返回原值，否则返回该值的负值即可。

函数调用
在 Python 中，要调用一个函数需要知道函数的名称和参数，比如求绝对值的函数my_abs()，只有一个参数。 
比如：

print(my_abs(-5)) #输出结果为 5。
注意
如果传入的参数数量不对，会报TypeError的错误，并且 Python 会明确地告诉你：my_abs()有且仅有1个参数；
如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报TypeError的错误，并且给出错误信息：str是错误的参数类型。

参数传递
Python 的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。

以power函数为例，它主要用于计算幂次方。由于经常计算x 
2
 ，所以把第二个参数n的默认值设定为2。

def power(x, n=2):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s
当调用power(5)时，相当于调用power(5, 2)；而对于n > 2的其他情况，就必须明确地传入n，比如power(5, 3)。  

从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数时，要注意必选参数在前，默认参数在后，否则 Python 的解释器会报错。

编程要求
请在右侧代码框中编写程序实现arctg函数，根据输入的x和迭代项数N（默认为 5）返回相应的arctg值。

测试说明
本实训的测试样例如下：

测试输入：0.1
预期输出：0.09966865249206348365

平台会使用下列代码调用你编写的函数：

from sample import arctg
print('%.20f' % arctg(float(input())))
'''

 # 请用函数实现arctg泰勒级数计算，包含隐含参数N
def arctg(x, N=5):
    '''
    :param x: 输入值
    :param N: 迭代项数，缺省值为5
    :return: arctg值
    '''
    #   请在此添加实现代码   #
    # ********** Begin *********#
    out = x
    for i in range(1, N):
        tmp = i*2+1
        out += ((-1)**i)*(x**tmp)/tmp
    return out

    # ********** End **********#
print('%.20f' % arctg(float(input())))